{"version":3,"sources":["../src/index.js"],"names":["mitt","all","list","type","let","t","toLowerCase","on","handler","push","off","e","i","indexOf","splice","emit","event","concat","forEach","f"],"mappings":"AAIA,QAAwBA,GAAKC,GAK5B,QAASC,GAAKC,GACbC,GAAIC,GAAIF,EAAKG,aACb,OAAOL,GAAII,KAAOJ,EAAII,OAGvB,MARAJ,GAAMA,OAeLM,GAAE,SAACJ,EAAMK,GACRN,EAAKC,GAAMM,KAAKD,IAQjBE,IAAG,SAACP,EAAMK,GACTJ,GAAIO,GAAIT,EAAKC,GACZS,EAAID,EAAEE,QAAQL,IACVI,GAAGD,EAAEG,OAAOF,EAAG,IASrBG,KAAI,SAACZ,EAAMa,GACVd,EAAK,KAAKe,OAAOf,EAAKC,IAAOe,QAAS,SAAAC,GAAOA,EAAEH","file":"mitt.js","sourcesContent":["/** Mitt: Tiny (~200b) functional event emitter / pubsub.\n *\t@name mitt\n *\t@returns {Mitt}\n */\nexport default function mitt(all) {\n\t// Arrays of event handlers, keyed by type\n\tall = all || {};\n\n\t// Get or create a named handler list\n\tfunction list(type) {\n\t\tlet t = type.toLowerCase();\n\t\treturn all[t] || (all[t] = []);\n\t}\n\n\treturn {\n\n\t\t/** Register an event handler for the given type.\n\t\t *\t@param {String} type\t\tType of event to listen for, or `\"*\"` for all events\n\t\t *\t@param {Function} handler\tFunction to call in response to the given event\n\t\t *\t@memberof mitt\n\t\t */\n\t\ton(type, handler) {\n\t\t\tlist(type).push(handler);\n\t\t},\n\n\t\t/** Remove an event handler for the given type.\n\t\t *\t@param {String} type\t\tType of event to unregister `handler` from, or `\"*\"`\n\t\t *\t@param {Function} handler\tHandler function to remove\n\t\t *\t@memberof mitt\n\t\t */\n\t\toff(type, handler) {\n\t\t\tlet e = list(type),\n\t\t\t\ti = e.indexOf(handler);\n\t\t\tif (~i) e.splice(i, 1);\n\t\t},\n\n\t\t/** Invoke all handlers for the given type.\n\t\t *\tIf present, `\"*\"` handlers are invoked prior to type-matched handlers.\n\t\t *\t@param {String} type\tThe event type to invoke\n\t\t *\t@param {Any} [event]\tAn event object, passed to each handler\n\t\t *\t@memberof mitt\n\t\t */\n\t\temit(type, event) {\n\t\t\tlist('*').concat(list(type)).forEach( f => { f(event); });\n\t\t}\n\t};\n}\n"]}